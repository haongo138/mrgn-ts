makeSetupIx    
The `makeSetupIx` function is a method that prepares setup instructions for creating Associated Token Accounts (ATAs) if they don't already exist.

    Parameters:
    - `banks` (`PublicKey[]`): The list of bank addresses.

repayWithCollateral    
The `repayWithCollateral` method allows users to repay a borrowed asset using collateral from another asset. It performs the following steps:
    1. Withdraws the specified amount (or all) of the collateral asset.
    2. Swaps the withdrawn collateral for the borrowed asset.
    3. Repays the specified amount (or all) of the borrowed asset.

    Parameters:
    - `repayAmount` (`Amount`): The amount to repay of the borrowed asset.
    - `withdrawAmount` (`Amount`): The amount of collateral to withdraw.
    - `borrowBankAddress` (`PublicKey`): The address of the bank where the asset was borrowed from.
    - `depositBankAddress` (`PublicKey`): The address of the bank where the collateral is deposited.
    - `withdrawAll` (`boolean`): (Optional) If true, withdraws all available collateral.
    - `repayAll` (`boolean`): (Optional) If true, repays the entire borrowed amount.
    - `swapIxs` (`TransactionInstruction[]`): An array of swap instructions for converting the collateral to the repayment asset.
    - `swapLookupTables` (`AddressLookupTableAccount[]`): Address lookup tables for the swap.
    - `priorityFeeUi` (`number`): (Optional) Priority fee for the transaction.

    Returns a `Promise` that resolves to the transaction signature as a `string`.

makeRepayWithCollatTx    
The `makeRepayWithCollatTx` method creates a transaction for repaying a borrowed asset using collateral from another asset. It builds a complete transaction including setup instructions, compute budget instructions, priority fee instructions, withdrawal instructions, swap instructions, and deposit instructions.

    Parameters:
    - `repayAmount` (`Amount`): The amount to repay of the borrowed asset.
    - `withdrawAmount` (`Amount`): The amount of collateral to withdraw.
    - `borrowBankAddress` (`PublicKey`): The address of the bank where the asset was borrowed from.
    - `depositBankAddress` (`PublicKey`): The address of the bank where the collateral is deposited.
    - `withdrawAll` (`boolean`): (Optional) If true, withdraws all available collateral.
    - `repayAll` (`boolean`): (Optional) If true, repays the entire borrowed amount.
    - `swapIxs` (`TransactionInstruction[]`): An array of swap instructions for converting the collateral to the repayment asset.
    - `swapLookupTables` (`AddressLookupTableAccount[]`): Address lookup tables for the swap.
    - `priorityFeeUi` (`number`): (Optional) Priority fee for the transaction.

    Returns a `Promise` that resolves to an object containing:
    - `transaction` (`VersionedTransaction`): The built transaction.
    - `addressLookupTableAccounts` (`AddressLookupTableAccount[]`): The address lookup table accounts used in the transaction.

loop    
The `loop` method performs a loop operation, which involves depositing an asset and borrowing against it in a single transaction. This can be used for leveraging a position.

    Parameters:
    - `depositAmount` (`Amount`): The amount of the asset to deposit.
    - `borrowAmount` (`Amount`): The amount of the asset to borrow.
    - `depositBankAddress` (`PublicKey`): The address of the bank where the asset is being deposited.
    - `borrowBankAddress` (`PublicKey`): The address of the bank from which the asset is being borrowed.
    - `swapIxs` (`TransactionInstruction[]`): An array of swap instructions for any necessary token conversions.
    - `swapLookupTables` (`AddressLookupTableAccount[]`): Address lookup tables for the swap.
    - `priorityFeeUi` (`number`): (Optional) Priority fee for the transaction.

    Returns a `Promise` that resolves to either:
    - A `string` representing the transaction signature, or
    - An object containing:
      - `flashloanTx` (`VersionedTransaction`): The built flashloan transaction.
      - `addressLookupTableAccounts` (`AddressLookupTableAccount[]`): The address lookup table accounts used in the transaction.

    This method first checks if the specified banks exist, then builds and processes the loop transaction using the `makeLoopTx` method.

simulateLoop    
The `simulateLoop` method simulates a loop operation without actually executing it on the blockchain. This allows users to preview the results of a loop operation before committing to it.

    Parameters:
    - `depositAmount` (`Amount`): The amount of the asset to deposit in the simulation.
    - `borrowAmount` (`Amount`): The amount of the asset to borrow in the simulation.
    - `depositBankAddress` (`PublicKey`): The address of the bank where the asset is being deposited.
    - `borrowBankAddress` (`PublicKey`): The address of the bank from which the asset is being borrowed.
    - `swapIxs` (`TransactionInstruction[]`): An array of swap instructions for any necessary token conversions.
    - `swapLookupTables` (`AddressLookupTableAccount[]`): Address lookup tables for the swap.
    - `priorityFeeUi` (`number`): (Optional) Priority fee for the simulated transaction.

    Returns a `Promise` that resolves to a `SimulationResult` object containing:
    - `banks` (`Map<string, Bank>`): A map of updated bank states after the simulated operation.
    - `marginfiAccount` (`MarginfiAccountWrapper`): The updated state of the Marginfi account after the simulated operation.

    This method creates a transaction using `makeLoopTx`, simulates it, and then constructs a preview of the resulting state. It's useful for users to understand the potential outcomes of a loop operation before executing it.

makeLoopTx    
The `makeLoopTx` method creates a transaction for performing a loop operation, which involves borrowing an asset and depositing another asset in a single transaction.

    Parameters:
    - `depositAmount` (`Amount`): The amount of the asset to deposit.
    - `borrowAmount` (`Amount`): The amount of the asset to borrow.
    - `depositBankAddress` (`PublicKey`): The address of the bank where the asset is being deposited.
    - `borrowBankAddress` (`PublicKey`): The address of the bank from which the asset is being borrowed.
    - `swapIxs` (`TransactionInstruction[]`): An array of swap instructions for any necessary token conversions.
    - `swapLookupTables` (`AddressLookupTableAccount[]`): Address lookup tables for the swap.
    - `priorityFeeUi` (`number`): (Optional) Priority fee for the transaction.
    - `createAtas` (`boolean`): (Optional) If true, creates Associated Token Accounts (ATAs) if they don't exist.

    Returns a `Promise` that resolves to an object containing:
    - `transaction` (`VersionedTransaction`): The built transaction for the loop operation.
    - `addressLookupTableAccounts` (`AddressLookupTableAccount[]`): The address lookup table accounts used in the transaction.

    This method performs the following steps:
    1. Verifies the existence of the deposit and borrow banks.
    2. Creates setup instructions for ATAs if necessary.
    3. Builds compute budget and priority fee instructions.
    4. Creates borrow and deposit instructions.
    5. Combines all instructions into a single flash loan transaction.

    The resulting transaction, when executed, will perform the loop operation in an atomic manner.

makeDepositIx    
The `makeDepositIx` method creates instructions for depositing assets into a Marginfi account.

    Parameters:
    - `amount` (`Amount`): The amount of the asset to deposit.
    - `bankAddress` (`PublicKey`): The address of the bank where the asset is being deposited.
    - `opt` (`MakeDepositIxOpts`): (Optional) Additional options for creating the deposit instruction.

    Returns a `Promise` that resolves to an `InstructionsWrapper` containing the deposit instructions.

    This method delegates the creation of deposit instructions to the internal `_marginfiAccount` object.

deposit    
The `deposit` method executes a deposit transaction, adding assets to a Marginfi account.

    Parameters:
    - `amount` (`Amount`): The amount of the asset to deposit.
    - `bankAddress` (`PublicKey`): The address of the bank where the asset is being deposited.
    - `opt` (`MakeDepositIxOpts`): (Optional) Additional options for the deposit transaction.

    Returns a `Promise` that resolves to a `string` representing the transaction signature.

    This method performs the following steps:
    1. Creates priority fee instructions if necessary.
    2. Generates deposit instructions using `makeDepositIx`.
    3. Builds and processes the transaction.
    4. Returns the transaction signature upon successful completion.

simulateDeposit    
The `simulateDeposit` method simulates a deposit operation without executing it on the blockchain.

    Parameters:
    - `amount` (`Amount`): The amount of the asset to deposit in the simulation.
    - `bankAddress` (`PublicKey`): The address of the bank where the asset is being deposited.

    Returns a `Promise` that resolves to a `SimulationResult` object containing:
    - `banks` (`Map<string, Bank>`): A map of updated bank states after the simulated deposit.
    - `marginfiAccount` (`MarginfiAccountWrapper`): The updated state of the Marginfi account after the simulated deposit.

    This method creates a transaction using `makeDepositIx`, simulates it, and then constructs a preview of the resulting state. It's useful for users to understand the potential outcomes of a deposit operation before executing it.

makeRepayIx    
The `makeRepayIx` method creates instructions for repaying borrowed assets in a Marginfi account.

    Parameters:
    - `amount` (`Amount`): The amount of the asset to repay.
    - `bankAddress` (`PublicKey`): The address of the bank where the repayment is being made.
    - `repayAll` (`boolean`): (Optional) If true, repays the entire borrowed amount.
    - `opt` (`MakeRepayIxOpts`): (Optional) Additional options for creating the repay instruction.

    Returns a `Promise` that resolves to an `InstructionsWrapper` containing the repay instructions.

    This method first checks if the token program address for the repayment mint exists, then delegates the creation of repay instructions to the internal `_marginfiAccount` object.

repay    
The `repay` method executes a repayment transaction, reducing the borrowed amount in a Marginfi account.

    Parameters:
    - `amount` (`Amount`): The amount of the asset to repay.
    - `bankAddress` (`PublicKey`): The address of the bank where the repayment is being made.
    - `repayAll` (`boolean`): (Optional) If true, repays the entire borrowed amount.
    - `opt` (`MakeRepayIxOpts`): (Optional) Additional options for the repay transaction.

    Returns a `Promise` that resolves to a `string` representing the transaction signature.

    This method performs the following steps:
    1. Creates priority fee instructions if necessary.
    2. Generates repay instructions using `makeRepayIx`.
    3. Builds and processes the transaction.
    4. Returns the transaction signature upon successful completion.

simulateRepay    
The `simulateRepay` method simulates a repayment operation without executing it on the blockchain.

    Parameters:
    - `amount` (`Amount`): The amount of the asset to repay in the simulation.
    - `bankAddress` (`PublicKey`): The address of the bank where the repayment is being made.
    - `repayAll` (`boolean`): (Optional) If true, simulates repaying the entire borrowed amount.

    Returns a `Promise` that resolves to a `SimulationResult` object containing:
    - `banks` (`Map<string, Bank>`): A map of updated bank states after the simulated repayment.
    - `marginfiAccount` (`MarginfiAccountWrapper`): The updated state of the Marginfi account after the simulated repayment.

    This method creates a transaction using `makeRepayIx`, simulates it, and then constructs a preview of the resulting state. It's useful for users to understand the potential outcomes of a repayment operation before executing it.

makeWithdrawIx    
The `makeWithdrawIx` method creates instructions for withdrawing assets from a Marginfi account.

    Parameters:
    - `amount` (`Amount`): The amount of the asset to withdraw.
    - `bankAddress` (`PublicKey`): The address of the bank from which the withdrawal is being made.
    - `withdrawAll` (`boolean`): (Optional) If true, withdraws the entire available amount.
    - `opt` (`MakeWithdrawIxOpts`): (Optional) Additional options for creating the withdraw instruction.

    Returns a `Promise` that resolves to an `InstructionsWrapper` containing the withdraw instructions.

    This method first checks if the token program address for the withdrawal mint exists, then delegates the creation of withdraw instructions to the internal `_marginfiAccount` object.

makeWithdrawAllTx    
The `makeWithdrawAllTx` method creates a transaction for withdrawing all assets from multiple banks in a Marginfi account.

    Parameters:
    - `banks` (`Array`): An array of objects, each containing:
      - `amount` (`Amount`): The amount to withdraw from the bank.
      - `bankAddress` (`PublicKey`): The address of the bank to withdraw from.
    - `opt` (`MakeWithdrawIxOpts`): (Optional) Additional options for the withdraw transaction.

    Returns a `Promise` that resolves to a `Transaction` object containing instructions for withdrawing from all specified banks.

    This method performs the following steps:
    1. Creates priority fee instructions if necessary.
    2. Generates compute budget instructions.
    3. Creates withdraw instructions for each specified bank using `makeWithdrawIx`.
    4. Combines all instructions into a single transaction.

withdraw    
The `withdraw` method executes a withdrawal transaction, removing assets from a Marginfi account.

    Parameters:
    - `amount` (`Amount`): The amount of the asset to withdraw.
    - `bankAddress` (`PublicKey`): The address of the bank from which the withdrawal is being made.
    - `withdrawAll` (`boolean`): (Optional) If true, withdraws the entire available amount.
    - `opt` (`MakeWithdrawIxOpts`): (Optional) Additional options for the withdraw transaction.

    Returns a `Promise` that resolves to a `string` representing the transaction signature.

    This method performs the following steps:
    1. Creates priority fee instructions if necessary.
    2. Generates compute budget instructions.
    3. Creates withdraw instructions using `makeWithdrawIx`.
    4. Builds and processes the transaction.
    5. Returns the transaction signature upon successful completion.

simulateWithdraw    
The `simulateWithdraw` method simulates a withdrawal operation without actually executing it on the blockchain. This allows users to preview the results of a withdrawal operation before committing to it.

    Parameters:
    - `amount` (`Amount`): The amount of the asset to withdraw.
    - `bankAddress` (`PublicKey`): The address of the bank from which the asset is being withdrawn.
    - `withdrawAll` (`boolean`): (Optional) If true, withdraws all available assets.

    Returns a `Promise` that resolves to a `SimulationResult` object containing:
    - `banks` (`Map<string, Bank>`): A map of updated bank states after the simulated operation.
    - `marginfiAccount` (`MarginfiAccountWrapper`): The updated state of the Marginfi account after the simulated operation.

    This method constructs the transaction for the withdrawal, simulates it, and provides a preview of the resulting state.

makeBorrowIx    
The `makeBorrowIx` method creates instructions for borrowing an asset from a specified bank.

    Parameters:
    - `amount` (`Amount`): The amount of the asset to borrow.
    - `bankAddress` (`PublicKey`): The address of the bank from which the asset is being borrowed.
    - `opt` (`MakeBorrowIxOpts`): (Optional) Additional options for the borrow instruction.

    Returns a `Promise` that resolves to an `InstructionsWrapper` containing:
    - `instructions` (`TransactionInstruction[]`): An array of transaction instructions for the borrow operation.

    This method verifies the necessary details and constructs the instructions required to borrow the specified asset.

borrow    
The `borrow` method allows users to borrow an asset from a specified bank. It processes the borrow transaction on the blockchain.

    Parameters:
    - `amount` (`Amount`): The amount of the asset to borrow.
    - `bankAddress` (`PublicKey`): The address of the bank from which the asset is being borrowed.
    - `opt` (`MakeBorrowIxOpts`): (Optional) Additional options for the borrow transaction.

    Returns a `Promise` that resolves to a `string` representing the transaction signature.

    This method builds the complete borrow transaction including priority fee instructions and processes it on the blockchain.

simulateBorrow    
The `simulateBorrow` method simulates a borrow operation without actually executing it on the blockchain. This allows users to preview the results of a borrow operation before committing to it.

    Parameters:
    - `amount` (`Amount`): The amount of the asset to borrow.
    - `bankAddress` (`PublicKey`): The address of the bank from which the asset is being borrowed.

    Returns a `Promise` that resolves to a `SimulationResult` object containing:
    - `banks` (`Map<string, Bank>`): A map of updated bank states after the simulated operation.
    - `marginfiAccount` (`MarginfiAccountWrapper`): The updated state of the Marginfi account after the simulated operation.

    This method constructs the transaction for the borrow operation, simulates it, and provides a preview of the resulting state.

makeWithdrawEmissionsIx    
The `makeWithdrawEmissionsIx` method creates instructions for withdrawing emissions from a specified bank.

    Parameters:
    - `bankAddress` (`PublicKey`): The address of the bank from which emissions are to be withdrawn.

    Returns a `Promise` that resolves to an `InstructionsWrapper` containing:
    - `instructions` (`TransactionInstruction[]`): An array of transaction instructions for the emission withdrawal operation.

    This method constructs the necessary instructions required to withdraw emissions from the specified bank.

withdrawEmissions    
The `withdrawEmissions` method allows users to withdraw emissions from a specified bank. It processes the emission withdrawal transaction on the blockchain.

    Parameters:
    - `bankAddress` (`PublicKey`): The address of the bank from which emissions are to be withdrawn.

    Returns a `Promise` that resolves to a `string` representing the transaction signature.

    This method builds the complete emission withdrawal transaction and processes it on the blockchain.

makeLendingAccountLiquidateIx    
The `makeLendingAccountLiquidateIx` method creates instructions for liquidating a lending account.

    Parameters:
    - `liquidateeMarginfiAccount` (`MarginfiAccount`): The Marginfi account to be liquidated.
    - `assetBankAddress` (`PublicKey`): The address of the bank holding the asset to be liquidated.
    - `assetQuantityUi` (`Amount`): The quantity of the asset to be liquidated.
    - `liabBankAddress` (`PublicKey`): The address of the bank holding the liability.

    Returns a `Promise` that resolves to an `InstructionsWrapper` containing:
    - `instructions` (`TransactionInstruction[]`): An array of transaction instructions for the liquidation operation.

    This method constructs the necessary instructions required to liquidate the specified lending account.

lendingAccountLiquidate    
The `lendingAccountLiquidate` method allows users to liquidate a lending account. It processes the liquidation transaction on the blockchain.

    Parameters:
    - `liquidateeMarginfiAccount` (`MarginfiAccount`): The Marginfi account to be liquidated.
    - `assetBankAddress` (`PublicKey`): The address of the bank holding the asset to be liquidated.
    - `assetQuantityUi` (`Amount`): The quantity of the asset to be liquidated.
    - `liabBankAddress` (`PublicKey`): The address of the bank holding the liability.

    Returns a `Promise` that resolves to a `string` representing the transaction signature.

    This method builds the complete liquidation transaction and processes it on the blockchain.

makeBeginFlashLoanIx    
The `makeBeginFlashLoanIx` method creates instructions for beginning a flash loan.

    Parameters:
    - `endIndex` (`number`): The index at which the flash loan ends.

    Returns a `Promise` that resolves to an `InstructionsWrapper` containing:
    - `instructions` (`TransactionInstruction[]`): An array of transaction instructions for beginning the flash loan.

    This method constructs the necessary instructions required to initiate a flash loan.

makeEndFlashLoanIx    
The `makeEndFlashLoanIx` method creates instructions for ending a flash loan.

    Parameters:
    - `projectedActiveBalances` (`PublicKey[]`): An array of public keys representing the projected active balances.

    Returns a `Promise` that resolves to an `InstructionsWrapper` containing:
    - `instructions` (`TransactionInstruction[]`): An array of transaction instructions for ending the flash loan.

    This method constructs the necessary instructions required to conclude a flash loan.

flashLoan    
The `flashLoan` method allows users to execute a flash loan. It processes the flash loan transaction on the blockchain.

    Parameters:
    - `args` (`FlashLoanArgs`): The arguments for the flash loan, including instructions and optional signers.

    Returns a `Promise` that resolves to a `string` representing the transaction signature.

    This method builds the complete flash loan transaction, including both the beginning and ending instructions, and processes it on the blockchain.

buildFlashLoanTx    
The `buildFlashLoanTx` method creates a transaction for a flash loan.

    Parameters:
    - `args` (`FlashLoanArgs`): The arguments for the flash loan, including instructions and optional signers.
    - `lookupTables` (`AddressLookupTableAccount[]`): (Optional) Address lookup tables for the transaction.

    Returns a `Promise` that resolves to a `VersionedTransaction` object containing:
    - `transaction` (`VersionedTransaction`): The built transaction for the flash loan operation.

    This method constructs the complete transaction for the flash loan, combining all necessary instructions and address lookup tables.

makeTransferAccountAuthorityIx    
The `makeTransferAccountAuthorityIx` method creates instructions for transferring the authority of an account to a new authority.

    Parameters:
    - `newAccountAuthority` (`PublicKey`): The public key of the new account authority.

    Returns a `Promise` that resolves to an `InstructionsWrapper` containing:
    - `instructions` (`TransactionInstruction[]`): An array of transaction instructions for the authority transfer operation.

    This method constructs the necessary instructions required to transfer the account authority to a new public key.

address    PublicKey
The public key or address of the bank.

tokenSymbol    string | undefined
The symbol or ticker of the token associated with the bank (if available).

group    PublicKey
The public key of the group that the bank belongs to.

mint    PublicKey
The public key of the mint associated with the bank's token.

mintDecimals    number
The number of decimals for the bank's token.

assetShareValue    BigNumber
The value of one asset share in the bank.

liabilityShareValue    BigNumber
The value of one liability share in the bank.

liquidityVault    PublicKey
The public key of the liquidity vault associated with the bank.

liquidityVaultBump    number
The bump seed used to derive the liquidity vault authority.

liquidityVaultAuthorityBump    number
The bump seed used to derive the liquidity vault authority.

insuranceVault    PublicKey
The public key of the insurance vault associated with the bank.

insuranceVaultBump    number
The bump seed used to derive the insurance vault authority.

insuranceVaultAuthorityBump    number
The bump seed used to derive the insurance vault authority.

collectedInsuranceFeesOutstanding    BigNumber
The amount of outstanding collected insurance fees.

feeVault    PublicKey
The public key of the fee vault associated with the bank.

feeVaultBump    number
The bump seed used to derive the fee vault authority.

feeVaultAuthorityBump    number
The bump seed used to derive the fee vault authority.

collectedGroupFeesOutstanding    BigNumber
The amount of outstanding collected group fees.

lastUpdate    number
The timestamp of the last update to the bank.

config    BankConfig
The configuration settings for the bank.

totalAssetShares    BigNumber
The total number of asset shares in the bank.

totalLiabilityShares    BigNumber
The total number of liability shares in the bank.

emissionsActiveBorrowing    boolean
Indicates whether emissions are active for borrowing.

emissionsActiveLending    boolean
Indicates whether emissions are active for lending.

emissionsRate    number
The rate of emissions for the bank.

emissionsMint    PublicKey
The public key of the mint associated with the bank's emissions.

emissionsRemaining    BigNumber
The amount of emissions remaining for the bank.

active    boolean
Indicates whether the balance is active or not.

bankPk    PublicKey
The public key of the bank associated with the balance.

assetShares    BigNumber
The amount of asset shares held in the balance.

liabilityShares    BigNumber
The amount of liability shares held in the balance.

emissionsOutstanding    BigNumber
The amount of outstanding emissions associated with the balance.

lastUpdate    number
The timestamp of the last update to the balance.

getAllMarginfiAccountPubkeys    Argument(s): None
Retrieves the public keys of all marginfi accounts in the specified group.

getMultipleMarginfiAccounts    Argument(s): pubkeys
Fetches multiple marginfi accounts based on an array of public keys.

getAllMarginfiAccountAddresses    Argument(s): None
Retrieves the addresses of all marginfi accounts in the underlying group.

getMarginfiAccountsForAuthority    Argument(s): authority (optional)
Retrieves all marginfi accounts under the specified authority.

getAllProgramAccountAddresses    Argument(s): type
Retrieves the addresses of all accounts owned by the marginfi program of a specified type.

getBankByPk    Argument(s): bankAddress
Finds a bank by its public key address.

getBankByMint    Argument(s): mint
Finds a bank by its mint address.

getBankByTokenSymbol    Argument(s): tokenSymbol
Finds a bank by its token symbol.

getOraclePriceByBank    Argument(s): bankAddress
Retrieves the oracle price for a specified bank.

makeCreateMarginfiAccountIx    Argument(s): marginfiAccountPk
Creates a transaction instruction to create a new marginfi account under the authority of the user.

createMarginfiAccount    Argument(s): opts (optional), createOpts (optional)
Creates a new marginfi account under the authority of the user.

processTransaction    Argument(s): transaction, signers (optional), opts (optional)
Processes a transaction, signs it, and sends it to the network.

simulateTransaction    Argument(s): transaction, accountsToInspect
Simulates a transaction and inspects the provided accounts.

getBankVaultSeeds    Argument(s): type
Returns the seed buffer for a specific bank vault type.

getBankVaultAuthoritySeeds    Argument(s): type
Returns the authority seed buffer for a specific bank vault type.

getBankVaultAuthority    Argument(s): bankVaultType, bankPk, programId
Computes the authority Program Derived Address (PDA) for a specific marginfi group bank vault.

makeWrapSolIxs    Argument(s): walletAddress, amount
Creates instructions to wrap SOL into a native token account.

makeUnwrapSolIx    Argument(s): walletAddress
Creates an instruction to unwrap SOL from a native token account.

makeVersionedTransaction    Argument(s): blockhash, transaction, payer, addressLookupTables (optional)
Creates a versioned transaction from a given blockhash, transaction, and payer, optionally including address lookup tables.

Environment    
Defines the possible configuration environments for the Marginfi protocol.

BankVaultType    
Enum for marginfi bank vault types, which includes **`LiquidityVault`**, **`InsuranceVault`**, and **`FeeVault`**.

MarginfiConfig    
Configuration interface for Marginfi, including environment, cluster, program ID, and group public key.

BankAddress    
Interface representing a bank address with a label and a public key address.

AccountType    
Enum for on-chain account types, which includes **`MarginfiGroup`**, **`MarginfiAccount`**, and **`Bank`**.

BalanceRaw    
Represents the raw on-chain data structure for a user's balance in the Marginfi protocol.

MarginfiGroupRaw    
Represents the raw on-chain data structure for a Marginfi group.
